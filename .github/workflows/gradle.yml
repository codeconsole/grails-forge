name: Java CI
on:
  push:
    branches:
      - '[1-9]+.[0-9]+.x'
  pull_request:
    branches:
      - '[1-9]+.[0-9]+.x'
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: ['11']
    steps:
      - uses: actions/checkout@v3.5.3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: ${{ matrix.java }}
      - name: Run Tests
        if: github.event_name == 'pull_request'
        id: tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: check
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
      - name: Run Build
        if: github.event_name == 'push'
        id: build
        uses: gradle/gradle-build-action@v2
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
        with:
          arguments: build
      - name: Verify CLI
        if: steps.build.outcome == 'success' && github.event_name == 'push'
        run: |
          cp grails-cli/build/distributions/grails-cli-*.zip cli.zip
          unzip cli -d tmp
          mv tmp/grails-cli-* tmp/cli
          ./tmp/cli/bin/grails --version
      - name: Publish to Sonatype OSSRH
        id: publish
        if: steps.build.outcome == 'success' && github.event_name == 'push'
        uses: gradle/gradle-build-action@v2
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
        with:
          arguments: publishToSonatype
  deploy:
    name: Deploy To Google Cloud Run
    runs-on: ubuntu-latest
    needs: [build]
    env:
      IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_APP_NAME }}:snapshot
    steps:
      - name: Login
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_EMAIL }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
      - name: Configure Docker
        run: gcloud auth configure-docker --quiet
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3.11.0
        with:
          distribution: 'adopt'
          java-version: '11'
      - name: Run Tests
        run: ./gradlew grails-forge-api:test grails-forge-web-netty:test
      - name: Build Docker image
        # To deploy native executables built with GraalVM replace dockerBuild with dockerBuildNative and dockerPush with dockerPushNative. First, try that it works locally.
        run: |
          ./gradlew grails-forge-web-netty:dockerBuild -PdockerImageName="$IMAGE_NAME"
      - name: Push image to Google Cloud Container Registry
        run: |
          ./gradlew grails-forge-web-netty:dockerPush -PdockerImageName="$IMAGE_NAME"
      - name: Deploy Docker image
        run: gcloud run deploy ${{ secrets.GCP_PROJECT_ID }}-snapshot --image $IMAGE_NAME --region us-central1 --platform managed --allow-unauthenticated
