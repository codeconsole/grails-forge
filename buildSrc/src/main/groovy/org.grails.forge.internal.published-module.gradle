plugins {
    id "org.grails.forge.internal.base-module"
    id 'maven-publish'
    id 'signing'
}


ExtraPropertiesExtension ext = extensions.getByType(ExtraPropertiesExtension)

ext."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY')
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : "${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg"
ext."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')

def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''

ext.pomInfo = {
    if (project.extensions.getByType(ExtraPropertiesExtension).has('startPomInfo')) {
        ext.startPomInfo.delegate = delegate
        ext.startPomInfo.call()
    }
    delegate.name project.title
    delegate.description project.projectDesc
    delegate.url project.findProperty('projectUrl')

    delegate.licenses {
        delegate.license {
            delegate.name 'The Apache Software License, Version 2.0'
            delegate.url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            delegate.distribution 'repo'
        }
    }

    delegate.scm {
        delegate.url "scm:git@github.com:${githubSlug}.git"
        delegate.connection "scm:git@github.com:${githubSlug}.git"
        delegate.developerConnection "scm:git@github.com:${githubSlug}.git"
    }

    if(project.hasProperty('developers')) {
        delegate.developers {
            for(dev in project.findProperty('developers').split(',')) {
                delegate.developer {
                    delegate.id "puneetbehl"
                    delegate.name "Puneet Behl"
                }
            }
        }
    }
    if (project.extensions.getByType(ExtraPropertiesExtension).has('extraPomInfo')) {
        ext.extraPomInfo.delegate = delegate
        ext.extraPomInfo.call()
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

project.afterEvaluate {
    boolean isPlatform = project.plugins.findPlugin("java-platform") != null

    publishing {
        repositories {
            def externalRepo = providers.systemProperty("org.grails.publishing.uri")
                    .forUseAtConfigurationTime()
                    .orNull
            if (externalRepo) {

                def externalRepoUsername = providers.systemProperty("org.grails.publishing.username")
                        .forUseAtConfigurationTime()
                        .orNull
                def externalRepoPassword = providers.systemProperty("org.grails.publishing.password")
                        .forUseAtConfigurationTime()
                        .orNull

                maven {
                    name = "Grails Artifactory"
                    url = externalRepo
                    if(externalRepoUsername){
                        credentials {
                            username = externalRepoUsername
                            password = externalRepoPassword
                        }
                    }
                }
            }

            maven {
                name = "Build"
                url = "${rootProject.layout.buildDirectory.dir("repo").get().asFile.toURI()}"
            }

        }
        publications {
            if (project.extensions.findByType(PublishingExtension).publications.empty) {
                maven(MavenPublication) { publication ->
                    if (!project.name.endsWith("bom")) {
                        versionMapping {
                            usage('java-api') {
                                fromResolutionOf('runtimeClasspath')
                            }
                            usage('java-runtime') {
                                fromResolutionResult()
                            }
                        }
                    }

                    if(project.hasProperty('shadowJarEnabled') && project.shadowJarEnabled == true) {
                        // TODO: This code doesn't use Gradle publications, it hard codes publishing
                        // which is easy to break and causes Gradle Module Metadata to be ignored
                        // this should be replaced with a publication
                        def shadowJar = tasks.named("shadowJar")
                        artifact(shadowJar) {
                            classifier = null
                        }
                        artifact(tasks.named('javadocJar'))
                        artifact(tasks.named('sourcesJar'))
                        pom.withXml { xml ->
                            def xmlNode = xml.asNode()
                            def dependenciesNode = xmlNode.appendNode('dependencies')
                            Set<Dependency> visited = new HashSet<>()

                            project.configurations.api.allDependencies.each {
                                if (!(it instanceof SelfResolvingDependency)) {
                                    def dependencyNode = dependenciesNode.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', it.group)
                                    dependencyNode.appendNode('artifactId', it.name)
                                    dependencyNode.appendNode('version', it.version)
                                    dependencyNode.appendNode('scope', 'compile')
                                } else if (it instanceof ProjectDependency) {
                                    def dependencyNode = dependenciesNode.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', project.group)
                                    dependencyNode.appendNode('artifactId', "micronaut-$it.name")
                                    dependencyNode.appendNode('version', project.version)
                                    dependencyNode.appendNode('scope', 'compile')
                                }
                                visited.add(it)
                            }
                            def runtimeHandler = {
                                if (visited.contains(it)) {
                                    return
                                }
                                if (!(it instanceof SelfResolvingDependency)) {
                                    def dependencyNode = dependenciesNode.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', it.group)
                                    dependencyNode.appendNode('artifactId', it.name)
                                    dependencyNode.appendNode('version', it.version)
                                    dependencyNode.appendNode('scope', 'runtime')
                                } else if (it instanceof ProjectDependency) {
                                    def dependencyNode = dependenciesNode.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', project.group)
                                    dependencyNode.appendNode('artifactId', "micronaut-$it.name")
                                    dependencyNode.appendNode('version', project.version)
                                    dependencyNode.appendNode('scope', 'runtime')

                                }
                                visited.add(it)
                            }
                            project.configurations.implementation.allDependencies.each (runtimeHandler)
                            project.configurations.runtimeOnly.allDependencies.each (runtimeHandler)
                        }

                        pom.withXml {
                            def xml = asNode()

                            xml.children().last() + pomInfo
                        }
                    } else {
                        if (isPlatform) {
                            from components.javaPlatform
                            pom.withXml {
                                def xml = asNode()

                                xml.children().find {
                                    it.name().localPart == 'packaging'
                                } + ext.pomInfo
                            }
                        } else {
                            if (components.findByName('java')) {
                                from components.java
                            }

                            pom.withXml {
                                def xml = asNode()
                                xml.children().last() + ext.pomInfo
                            }
                        }
                    }

                }
            }
        }
    }
}

if (ossUser && ossPass) {
    if (ext."signing.keyId" && ext."signing.password") {
        afterEvaluate {
            if (project.extensions.findByType(PublishingExtension).publications.findByName('maven')) {
                signing {
                    required { !project.version.endsWith("-SNAPSHOT") && !project.hasProperty("skipSigning") }
                    sign publishing.publications.maven
                }
                tasks.withType(Sign) {
                    onlyIf { !project.version.endsWith("-SNAPSHOT") }
                }
            }
        }
    }

    //do not generate extra load on Nexus with new staging repository if signing fails
    tasks.withType(io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository).configureEach {
        if (!tasks.withType(Sign).empty) {
            shouldRunAfter(tasks.withType(Sign))
        }
    }
}

['sourcesJar', 'javadocJar'].each { name ->
    tasks.named(name, Jar) {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}
